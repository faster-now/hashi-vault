---

- hosts: all
  vars:
    token: needs-supplied-at-runtime
    docker_network: vault_net
    user: azureuser
    vault_url: http://127.0.0.1:8200
    vault_servers: #use dict so a port number can be specified for each vault server to facilitate running multiple containers on a single host
      vault-a: 8200
      vault-b: 8800
    vault_containers: #use to create and start containers on limited resource host (free tier on cloud providers cant cope with 5 containers)
      vault-a: 8200
    root_ca_file: ~/vault/certs/root_ca.cer
    ca_lifetime: 315360000 #10 years (in seconds)
  gather_facts: no
  remote_user: "{{user}}"
  become: no
  tasks:

    - name: Create parent folder to store the certs
      file:
        path: "{{ root_ca_file | dirname }}"
        state: directory
        owner: "{{user}}"
        group: "{{user}}"
        mode: 0775

    # - name: Test vault read health
    #   community.hashi_vault.vault_read:
    #     url: "{{ vault_url }}"
    #     path: sys/health
    #     # auth_method: userpass
    #     # username: user
    #     # password: '{{ passwd }}'
    #     token: "{{ token }}"
    #     token_validate: false
    #   register: health

    # - name: Display the health data
    #   ansible.builtin.debug:
    #     msg: "{{ health }}"

    - name: Check if Root CA needs created
      community.hashi_vault.vault_read:
        url: "{{ vault_url }}"
        path: sys/mounts
        token: "{{ token }}"
        token_validate: false
      register: mount_list_result

    - name: Display the root data
      ansible.builtin.debug:
        msg: "{{ mount_list_result }}"

    # - set_fact:
    #     jsonasstring: "{{ mount_list_result | string }}"

    # - name: Root CA needed result found
    #   ansible.builtin.set_fact:
    #     pki_already_exists: true
    #   when:
    #     - "'pki/' in (mount_list_result | string)"

    # - name: Display the root exists result
    #   ansible.builtin.debug:
    #     #msg: "{{ mount_list_result.data.data['pkit/'] }}" #| selectattr('domain', 'equalto', server_domain)}}"
    #     #msg: "'pkit' in mount_list_result" #| selectattr('domain', 'equalto', server_domain)}}"
    #     msg: "result: {{ pki_already_exists }}"

        #TODO check if root ca already generated (e.g, get list of certs)
    
    - name: Create Root CA for issuing consul and vault TLS certs
      community.hashi_vault.vault_write:
        url: "{{ vault_url }}"
        path: sys/mounts/pki
        data:
          type: pki
        token: "{{ token }}"
        token_validate: false
      when:
        - "not 'pki/' in (mount_list_result | string)"
        #- not pki_already_exists

    - name: Check if Root CA needs tuned
      community.hashi_vault.vault_read:
        url: "{{ vault_url }}"
        path: sys/mounts/pki/tune
        token: "{{ token }}"
        token_validate: false
      register: needs_tuned_result

    # - name: Needs tuned result
    #   ansible.builtin.debug:
    #     msg: "{{ needs_tuned_result }}"

    - name: Configure the Root CA
      community.hashi_vault.vault_write:
        url: "{{ vault_url }}"
        path: sys/mounts/pki/tune
        data:
          max_lease_ttl: "{{ ca_lifetime }}"
        token: "{{ token }}"
        token_validate: false
      when:
        - needs_tuned_result.data.data.max_lease_ttl != ca_lifetime

    # - name: Check if Root CA certificate is generated
    #   community.hashi_vault.vault_read:
    #     url: "{{ vault_url }}"
    #     path: "pki/issuers?list=true"
    #     token: "{{ token }}"
    #     token_validate: false
    #   register: root_ca_cert_result
    - name: Generate the Root CA certificate
      community.hashi_vault.vault_write:
        url: "{{ vault_url }}"
        path: pki/root/generate/internal
        data:
          common_name: vaultca root
          issuer_name: vaultca root
          ttl: "{{ ca_lifetime }}"
        token: "{{ token }}"
        token_validate: false
      register: root_ca_cert_result

    - name: root ca_cert_result
      ansible.builtin.debug:
        msg: "{{ root_ca_cert_result }}"

    - name: Write Root CA to file
      copy:
        content: "{{ root_ca_cert_result.data.data.certificate }}"
        dest: "{{ root_ca_file }}"
      when:
        - "'-----BEGIN' in (root_ca_cert_result | string)"

    # - block:
      


      





    #   - name: Display the result
    #     ansible.builtin.debug:
    #       msg: "{{ root_create_result }}"

    #   - name: Display the root cert
    #     ansible.builtin.debug:
    #       msg: "{{ root_create_result.data.data.issuing_ca }}"
    # when:
    #   - not pki_already_exists