---

- name: Check if consul encryption key is already defined
  lineinfile:
    state: absent
    path: "{{ base_consul_dir }}/{{ consul_servers[0] }}/config/consul.hcl" #files are all managed together so only check the first and use the result for all
    regexp: "^encrypt\\s*=\\s*"
  check_mode: true
  changed_when: false # This just makes things look prettier in the logs
  register: key_needs_created

- name: Generate a new consul encryption key
  community.docker.docker_container_exec:
    container: "{{ consul_servers[0] }}"
    command: -t "consul keygen"
  register: consul_enc_key
  when:
    - not key_needs_created.found or regenerate

- name: Add new encryption key to config
  lineinfile:
    path: "{{ base_consul_dir }}/{{ item }}/config/consul.hcl" #Add to all config files
    regexp: "^encrypt\\s*=\\s*"
    line: "encrypt = \"{{ consul_enc_key.stdout }}\" #generated by Ansible"
  register: key_added
  #notify: Restart consul #even though in a loop, will only result in one restart (handler takes care of restating all containers)
  when:
    - key_needs_created.found or regenerate
    - consul_enc_key is defined
  loop: "{{consul_servers}}"

- name: Restart consul
  include_role:
    name: consul-container-restart
  vars:
    container_name: "{{ consul_server }}"
    consul_image_version: "v1"
    consul_config_dir: "{{ base_consul_dir }}/{{ consul_server }}/config"
    consul_storage_dir: "{{ base_consul_dir }}/{{ consul_server }}/consul-storage"
    container_restart: yes
  loop: "{{ consul_servers }}"
  loop_control:
    loop_var: consul_server
  when:
    - key_added is defined and key_added.changed




