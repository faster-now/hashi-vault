---
#Initially this role checked if an encryption key existed in the config file to determine if encryption was already enabled.
#However this was unreliable as the consul-storage dir containing the consul data and keyring files is persistent between playbook runs and so on rebuild consul is already encrypted using a key in the keyring file that isnt in the newly built config file.
#As port 7500 isnt open from the consul containers (due to conflict) it was decided to run the consul keyring -list to determine if an encryption key is already defined
#Where an existing key is found it is added to the consul.hcl config files. Otherwise a new key is generated and added.
# - name: Check if consul encryption key is already defined
#   lineinfile:
#     state: absent
#     path: "{{ base_consul_dir }}/{{ consul_servers[0] }}/config/consul.hcl" #files are all managed together so only check the first and use the result for all
#     regexp: "^encrypt\\s*=\\s*"
#   check_mode: true
#   changed_when: false # This just makes things look prettier in the logs
#   register: key_needs_created

# - name: Check if there is an existing gossip encryption key
#   uri:
#     url: "{{ consul_tls_disable | ternary('http', 'https') }}://{{ inventory_hostname }}:{{ consul_http_port }}/v1/sys/audit"
#     validate_certs: "{{ tls_skip_verify | ternary('false', 'true') }}"
#     status_code: 200
#     return_content: yes
#   register: consul_keyring_results
- name: Check if there is an existing gossip encryption key
  community.docker.docker_container_exec:
    container: "{{ consul_servers[0] }}"
    command: consul keyring -list
  ignore_errors: true #an error is returned when encryption is not set, simply ignore
  register: consul_keyring_results

#regex: find (LAN):\\n  nf5dadwgfs/klsdfj= [3/3] (find (LAN): followed by one or more newlines then any whitespace then what should be the key (any char but reluctant qualifier to take as small a sample as it can) followed by a single whitespace then a square open bracket)
- set_fact:
    existing_consul_enc_key: "{{ consul_keyring_results | regex_search('\\(LAN\\):(\\\\n)+(\\s)*(?P<key>.*?)\\s\\[', '\\g<key>') | first }}"
  when: consul_keyring_results.stderr | length < 1
  #   - consul_keyring_results is defined
  #   - consul_keyring_results | length > 0

- name: Generate a new consul encryption key
  community.docker.docker_container_exec:
    container: "{{ consul_servers[0] }}"
    command: consul keygen
  register: new_consul_enc_key_result
  when:
    - (not existing_consul_enc_key is defined or existing_consul_enc_key | length < 1) or regenerate
    #- consul_keyring_results.json.Keys.key|length < 1 or regenerate

- set_fact:
    consul_enc_key_value: "{{ (existing_consul_enc_key is defined and existing_consul_enc_key | length > 1) | ternary(existing_consul_enc_key, new_consul_enc_key_result.stdout) }}"

- name: Add new encryption key to consul server config
  lineinfile:
    path: "{{ base_consul_dir }}/{{ item }}/config/consul.hcl" #Add to all config files
    regexp: "^encrypt\\s*=\\s*"
    line: "encrypt = \"{{ consul_enc_key_value }}\" #generated by Ansible"
  register: consul_key_added
  #notify: Restart consul #even though in a loop, will only result in one restart (handler takes care of restating all containers)
  when:
    #- not key_needs_created.found or regenerate
    - consul_enc_key_value | length > 1
    #- consul_enc_key is defined
  loop: "{{consul_servers}}"


# - name: Check if vault consul client encryption key is already defined
#   lineinfile:
#     state: absent
#     path: "{{ base_vault_dir }}/{{ lookup('dict', vault_servers)[0].key }}/config/consul.hcl" #files are all managed together so only check the first and use the result for all
#     regexp: "^encrypt\\s*=\\s*"
#   check_mode: true
#   #changed_when: false # This just makes things look prettier in the logs
#   register: client_key_needs_created

# - debug:
#     msg: "Consul client key needed result: {{ client_key_needs_created }}."

# - debug:
#     msg: "Lookup value: {{ lookup('dict', vault_servers)[0].key }}"

- name: Add new encryption key to vault consul client config
  lineinfile:
    path: "{{ base_vault_dir }}/{{ item.key }}/consul/config/consul.hcl" #Add to all config files
    regexp: "^encrypt\\s*=\\s*"
    line: "encrypt = \"{{ consul_enc_key_value }}\" #generated by Ansible"
  register: vault_consul_key_added
  #notify: Restart consul #even though in a loop, will only result in one restart (handler takes care of restating all containers)
  when:
    - consul_enc_key_value | length > 1
    # - not client_key_needs_created.found or regenerate
    # - consul_enc_key is defined
  with_dict: "{{vault_servers}}"

- name: (Re)start consul docker containers
  include_role:
    name: consul-container-restart-all
  when:
    - consul_key_added is defined and consul_key_added.changed

- name: (Re)start vault docker containers
  include_role:
    name: vault-container-restart-all
  when:
    - vault_consul_key_added is defined and vault_consul_key_added.changed
