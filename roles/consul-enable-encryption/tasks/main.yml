---

- name: Check if consul encryption key is already defined
  lineinfile:
    state: absent
    path: "{{ base_consul_dir }}/{{ consul_servers[0] }}/config/consul.hcl" #files are all managed together so only check the first and use the result for all
    regexp: "^encrypt\\s*=\\s*"
  check_mode: true
  changed_when: false # This just makes things look prettier in the logs
  register: key_needs_created

- debug:
    msg: "Consul key needed result: {{ key_needs_created }}"

- name: Generate a new consul encryption key
  community.docker.docker_container_exec:
    container: "{{ consul_servers[0] }}"
    command: consul keygen
  register: consul_enc_key
  when:
    - not key_needs_created.found or regenerate

- name: Add new encryption key to consul server config
  lineinfile:
    path: "{{ base_consul_dir }}/{{ item }}/config/consul.hcl" #Add to all config files
    regexp: "^encrypt\\s*=\\s*"
    line: "encrypt = \"{{ consul_enc_key.stdout }}\" #generated by Ansible"
  register: consul_key_added
  #notify: Restart consul #even though in a loop, will only result in one restart (handler takes care of restating all containers)
  when:
    - not key_needs_created.found or regenerate
    - consul_enc_key is defined
  loop: "{{consul_servers}}"


- name: Check if vault consul client encryption key is already defined
  lineinfile:
    state: absent
    path: "{{ base_vault_dir }}/{{ lookup('dict', vault_servers)[0].key }}/config/consul.hcl" #files are all managed together so only check the first and use the result for all
    regexp: "^encrypt\\s*=\\s*"
  check_mode: true
  #changed_when: false # This just makes things look prettier in the logs
  register: client_key_needs_created

- debug:
    msg: "Consul client key needed result: {{ client_key_needs_created }}."

- debug:
    msg: "Lookup value: {{ lookup('dict', vault_servers)[0].key }}"

- name: Add new encryption key to vault consul client config
  lineinfile:
    path: "{{ base_vault_dir }}/{{ item.key }}/config/consul.hcl" #Add to all config files
    regexp: "^encrypt\\s*=\\s*"
    line: "encrypt = \"{{ consul_enc_key.stdout }}\" #generated by Ansible"
  register: vault_consul_key_added
  #notify: Restart consul #even though in a loop, will only result in one restart (handler takes care of restating all containers)
  when:
    - client_key_needs_created.found or regenerate
    - consul_enc_key is defined
  with_dict: "{{vault_servers}}"

- name: (Re)start consul docker containers
  include_role:
    name: consul-container-restart
  vars:
    container_name: "{{ consul_server }}"
    consul_image_version: "v1"
    consul_config_dir: "{{ base_consul_dir }}/{{ consul_server }}/config"
    consul_storage_dir: "{{ base_consul_dir }}/{{ consul_server }}/consul-storage"
    container_restart: yes
  loop: "{{ consul_servers }}"
  loop_control:
    loop_var: consul_server
  when:
    - consul_key_added is defined and consul_key_added.changed

- name: (Re)start vault docker containers
  include_role:
    name: vault-container-restart
  vars:
    container_name: "{{ item.key }}"
    vault_image_version: "v1"
    host_port: "{{ item.value }}"
    container_port: "{{ item.value }}"
    vault_config_consul_file: "{{ base_vault_dir }}/{{ item.key }}/config/consul.hcl"
    vault_config_file: "{{ base_vault_dir }}/{{ item.key }}/config/vault.hcl"
    consul_storage_dir: "{{ base_vault_dir }}/{{ item.key }}/consul-storage"
    vault_host_audit_dir: "{{ base_vault_dir }}/{{ item.key }}/audit-logs"
    container_restart: yes
  with_dict: "{{ vault_containers }}"
  when:
    - vault_consul_key_added is defined and vault_consul_key_added.changed
